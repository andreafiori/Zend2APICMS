<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Languages extends \Application\Entity\Languages implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'language', 'abbrev1', 'abbrev2', 'abbrev3', 'defaultlang', 'defaultlangAdmin', 'encoding', 'flag', 'active', 'channelId');
        }

        return array('__isInitialized__', 'id', 'language', 'abbrev1', 'abbrev2', 'abbrev3', 'defaultlang', 'defaultlangAdmin', 'encoding', 'flag', 'active', 'channelId');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Languages $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage($language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', array($language));

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', array());

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setAbbrev1($abbrev1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbbrev1', array($abbrev1));

        return parent::setAbbrev1($abbrev1);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbbrev1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbbrev1', array());

        return parent::getAbbrev1();
    }

    /**
     * {@inheritDoc}
     */
    public function setAbbrev2($abbrev2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbbrev2', array($abbrev2));

        return parent::setAbbrev2($abbrev2);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbbrev2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbbrev2', array());

        return parent::getAbbrev2();
    }

    /**
     * {@inheritDoc}
     */
    public function setAbbrev3($abbrev3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbbrev3', array($abbrev3));

        return parent::setAbbrev3($abbrev3);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbbrev3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbbrev3', array());

        return parent::getAbbrev3();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultlang($defaultlang)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultlang', array($defaultlang));

        return parent::setDefaultlang($defaultlang);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultlang()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultlang', array());

        return parent::getDefaultlang();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultlangAdmin($defaultlangAdmin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultlangAdmin', array($defaultlangAdmin));

        return parent::setDefaultlangAdmin($defaultlangAdmin);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultlangAdmin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultlangAdmin', array());

        return parent::getDefaultlangAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncoding($encoding)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncoding', array($encoding));

        return parent::setEncoding($encoding);
    }

    /**
     * {@inheritDoc}
     */
    public function getEncoding()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncoding', array());

        return parent::getEncoding();
    }

    /**
     * {@inheritDoc}
     */
    public function setFlag($flag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFlag', array($flag));

        return parent::setFlag($flag);
    }

    /**
     * {@inheritDoc}
     */
    public function getFlag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFlag', array());

        return parent::getFlag();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', array($active));

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', array());

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setChannelId($channelId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChannelId', array($channelId));

        return parent::setChannelId($channelId);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannelId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannelId', array());

        return parent::getChannelId();
    }

}
